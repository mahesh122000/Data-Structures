/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;

class GFG {
    // function for filling the array with prime numbers without ending with 9.
    static void find(long a[],int n)
    {
        a[0]=2;
        a[1]=3;
        long val=3;
        int i=2;
        for(;i<a.length;)
        {
            val=prime(val);
            if(val%10!=9)
            {a[i]=val;i++;}
        }
    }
    // function to find next prime number using current prime number as input.
    static long prime(long n)
    {
        for(long i=n+1;;i++)
        {
            boolean flag=true;
            one:for(long j=2;j<=(long)Math.sqrt(i);j++)
            {
                if(i%j==0)
                {
                    flag=false;
                    break one;
                }
            }
            if(flag==true)
            return i;
        }
    }
	public static void main (String[] args) {
		Scanner s=new Scanner(System.in);
		int n=s.nextInt();
		long a[][]=new long[n][n];
		long b[]=new long[2*n];
		find(b,n);
		//to fill first column
		for(int j=0;j<1;j++)
		{
		    for(int i=0;i<n;i++)
		    {
		        if(i==0 && j==0)
		        a[i][j]=1;
		        else
		        {
		            a[i][j]=a[i-1][j]+b[i-1];
		        }
		    }
		}
		//to fill the remaining array.
		for(int i=0;i<n;i++)
		{
		    int k=0;
		    long c[]=new long[2];
		    c[0]=3;
		    c[1]=4;
		    for(int j=1;j<n;j++)
		    {
		      a[i][j]=a[i][j-1]+c[k];
		      c[k]=c[k%2]+c[(k+1)%2]-1;
		      k++;
		      k=k%2;
		    }
		}
		//printing the output
		for(int i=0;i<n;i++)
		{
		    for(int j=0;j<n;j++)
		    {
		        System.out.print(a[i][j]+" ");
		    }
		    System.out.println();
		}
	}
}
/* 
Output: for n=20


1 4 8 14 23 37 59 94 150 240 385 619 997 1608 2596 4194 6779 10961 17727 28674 
3 6 10 16 25 39 61 96 152 242 387 621 999 1610 2598 4196 6781 10963 17729 28676 
6 9 13 19 28 42 64 99 155 245 390 624 1002 1613 2601 4199 6784 10966 17732 28679 
11 14 18 24 33 47 69 104 160 250 395 629 1007 1618 2606 4204 6789 10971 17737 28684 
18 21 25 31 40 54 76 111 167 257 402 636 1014 1625 2613 4211 6796 10978 17744 28691 
29 32 36 42 51 65 87 122 178 268 413 647 1025 1636 2624 4222 6807 10989 17755 28702 
42 45 49 55 64 78 100 135 191 281 426 660 1038 1649 2637 4235 6820 11002 17768 28715 
59 62 66 72 81 95 117 152 208 298 443 677 1055 1666 2654 4252 6837 11019 17785 28732 
82 85 89 95 104 118 140 175 231 321 466 700 1078 1689 2677 4275 6860 11042 17808 28755 
113 116 120 126 135 149 171 206 262 352 497 731 1109 1720 2708 4306 6891 11073 17839 28786 
150 153 157 163 172 186 208 243 299 389 534 768 1146 1757 2745 4343 6928 11110 17876 28823 
191 194 198 204 213 227 249 284 340 430 575 809 1187 1798 2786 4384 6969 11151 17917 28864 
234 237 241 247 256 270 292 327 383 473 618 852 1230 1841 2829 4427 7012 11194 17960 28907 
281 284 288 294 303 317 339 374 430 520 665 899 1277 1888 2876 4474 7059 11241 18007 28954 
334 337 341 347 356 370 392 427 483 573 718 952 1330 1941 2929 4527 7112 11294 18060 29007 
395 398 402 408 417 431 453 488 544 634 779 1013 1391 2002 2990 4588 7173 11355 18121 29068 
462 465 469 475 484 498 520 555 611 701 846 1080 1458 2069 3057 4655 7240 11422 18188 29135 
533 536 540 546 555 569 591 626 682 772 917 1151 1529 2140 3128 4726 7311 11493 18259 29206 
606 609 613 619 628 642 664 699 755 845 990 1224 1602 2213 3201 4799 7384 11566 18332 29279 
689 692 696 702 711 725 747 782 838 928 1073 1307 1685 2296 3284 4882 7467 11649 18415 29362 

*/